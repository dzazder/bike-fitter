@page "/brakes"
@using BikeFitter.Api.Models
@using BikeFitter.Web.Routing
@using BikeFitter.Web.Services
@using Newtonsoft.Json
@inject RequestService RequestService
@inject Routes Routes

<h3>Brakes</h3>

@if (!shouldRender || getBrakesError)
{
    <p>Unable to get brakes from Api. Please try again later.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Url</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in brakes)
            {
                <tr>
                    <td>@b.Id</td>
                    <td>@b.Name</td>
                    <td>@b.Price</td>
                    <td>@b.Uri</td>
                    <td><a href="/BrakeDetails/@b.Id">Details</a></td>
                </tr>
            }
        </tbody>
    </table>

    <a href="/brakes/add" role="button" class="btn btn-primary">Add new</a>
}

@code {
    private IEnumerable<Brake> brakes = Array.Empty<Brake>();
    private bool getBrakesError;
    private bool shouldRender = false;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var response = await RequestService.SendRequest(HttpMethod.Get, Routes.Brakes);

        if (response.IsSuccessStatusCode)
        {
            string s = await response.Content.ReadAsStringAsync();
            brakes = JsonConvert.DeserializeObject<IEnumerable<Brake>>(s);
        }
        else
        {
            getBrakesError = true;
        }

        shouldRender = true;
    }
}

